// -- This is a parent command --
Cypress.Commands.add("login", (email, password) => {
  cy.get('[data-testid="inputEmail"]').type(email);
  cy.get('[data-testid="inputPassword"]').type(password);
  cy.get('[data-testid="btnLogin"]').click();
});

Cypress.Commands.add("questionTextBox", () => {
  return cy.get("#input"); // Mengembalikan elemen questionbox
});

Cypress.Commands.add("answerLoadingView", () => {
  return cy.get('#chatbox #message .loading').contains('Ace is writing', { matchCase: false }); // Mengembalikan elemen loadingquestionbox
});

Cypress.Commands.add("answerChatBox", () => {
  return cy.get(":nth-child(3) > #chatbox > #message"); // Mengembalikan elemen answerchatbox
});

Cypress.Commands.add('navigateToCategory', (mainCategory, subCategory, subSubCategory) => {
  // Navigate to main category
  cy.get('.vl-flyout-nav__container')
    .find('.vl-flyout-nav__js-tab')
    .contains(mainCategory)
    .click();

  // Navigate to sub-category
  cy.get('.brw-region.brw-region--left')
    .find('.brw-category-nav')
    .contains(subCategory)
    .click();

  // Navigate to sub-sub-category
  if (subSubCategory) {
    cy.get('.brwel__item')
      .find('.brw-category-nav__nested-items .brw-category-nav__link.textual-display')
      .contains(subSubCategory)
      .click();
  }
});

Cypress.Commands.add('applyFilter', (filterName, option) => {
  cy.get('.brwr__list')
    .find('.brwr__item')
    .contains(filterName)
    .click();
  cy.get('.filter-menu-button__content .brwr__inputs__actions')
    .contains(option)
    .click(); 
});

Cypress.Commands.add('validateFilterApplied', (filterText, isMultiple = false) => {
  const filterItem = cy.get('.brwr__list').find('.brwr__item--applied');

  if (isMultiple) {
    // Perform click to expand the filter if there are multiple filters
    filterItem.click();
    cy.get('.filter-menu-button__content')
      .find('.filter-menu-button__content__item')
      .contains(filterText)
      .should('exist');
    filterItem.click(); // Close the filter dropdown
  } else {
    // Directly validate if only one filter is applied
    filterItem.contains(filterText).should('exist');
  }
});

Cypress.Commands.add('validateMultipleFilters', (filters) => {
  const filterItem = cy.get('.brwr__list').find('.brwr__item--applied');

  filterItem.click();
  filters.forEach(filterText => {
    cy.get('.filter-menu-button__content')
      .find('.filter-menu-button__content__item')
      .contains(filterText)
      .should('exist');
  });
  filterItem.click(); // Close the filter dropdown
});

Cypress.Commands.add("makeRequest", (method, endpoint, body = {}, failOnStatusCode = true) => {
  const baseUrl = Cypress.config("baseUrlDev"); // Ambil dari config

  return cy.request({
      method: method,
      url: `${baseUrl}${endpoint}`,
      body: body,
      failOnStatusCode: failOnStatusCode
  });
});

Cypress.Commands.add("makeNinjaRequest", (method, endpoint) => {
  const baseUrl = Cypress.config("baseUrlNinjas");
  const apiKey = Cypress.env("APIKeyNinjas"); // Menggunakan Cypress.env() untuk mengambil API Key

  return cy.request({
    method: method,
    url: `${baseUrl}${endpoint}`,
    headers: { 
      'X-Api-Key': apiKey,
      'Accept': 'application/json',
      'User-Agent': undefined // Menghapus header User-Agent dari request
    },
  });
});

Cypress.Commands.add("apiNinjaRequestGET", (endpoint) => {
  const baseUrl = Cypress.config("baseUrlNinjas");
  const apiKey = Cypress.env("APIKeyNinjas"); // Ambil API Key dari environment variables

  return cy.request({
    method: "GET",
    url: `${baseUrl}${endpoint}`,
    headers: {
      "X-Api-Key": apiKey,
      "Accept": "application/json",
    },
  })
});

Cypress.Commands.add("apiNinjaRequestPOST", (endpoint, body) => {
  const baseUrl = Cypress.config("baseUrlNinjas");
  const apiKey = Cypress.env("APIKeyNinjas"); // Ambil API Key dari environment variables

  return cy.request({
    method: "POST",
    url: `${baseUrl}${endpoint}`,
    headers: {
      "X-Api-Key": apiKey,
      "Accept": "application/json",
      "Content-Type": "application/json"
    },
    body: body
  });
});









